{
    "properties": {},
    "description": "call_kafka_consumer",
    "processes": {
        "12multiplexer1": {
            "component": "com.sap.system.multiplexer.1-2",
            "metadata": {
                "label": "1:2 Multiplexer",
                "x": 72.99999904632568,
                "y": 132.5,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {}
            }
        },
        "python3operator1": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Simulate Slow Operation",
                "x": 442.99999713897705,
                "y": 132,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "script": "import re\nimport json\nimport requests\nimport time\n\ndef on_input(data):\n    processed_data = str(data)\n    \n    # simulate error\n    time.sleep(10)\n    \n    api.send(\"output\", processed_data)\n    \n\ndef on_stop(data):\n    api.send(\"stop\", \"stop\")\n\napi.set_port_callback(\"input\", on_input)\napi.set_port_callback(\"triggerStop\", on_stop)"
                },
                "additionalinports": [
                    {
                        "name": "input",
                        "type": "string"
                    },
                    {
                        "name": "triggerStop",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "output",
                        "type": "string"
                    },
                    {
                        "name": "stop",
                        "type": "string"
                    }
                ]
            }
        },
        "tostringconverter1": {
            "component": "com.sap.util.toStringConverter",
            "metadata": {
                "label": "ToString Converter",
                "x": 292.49999809265137,
                "y": 87,
                "height": 50,
                "width": 50,
                "config": {}
            }
        },
        "wiretap1": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 257.99999809265137,
                "y": 177,
                "height": 80,
                "width": 120,
                "ui": "dynpath",
                "config": {}
            }
        },
        "javascriptv2operator1": {
            "component": "com.sap.system.jsengine.v2",
            "metadata": {
                "label": "Call Kafka Subgraph",
                "x": -127.00000476837158,
                "y": 132.5,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "script": "$.setPortCallback(\"start\", onStart);\n$.setPortCallback(\"stop\", onStop);\n$.setPortCallback(\"resume\", onResume);\n\n// This example shows basic usage of a subgraph\n// It calls a graph with a parameter, provides input to a port,\n// checks a port's output and stops the graph\n\n/**\n * The instantiateGraph function provides the possibility to call a graph from the JavaScript operator. \n * You can provide parameters for the graph and handlers for output ports. \n * instantiateGraph returns a graph object when the graph is started or fail script execution. \n * The graph object has the following methods: \n * - wait - block script execution until subgraph execution is finished. wait returns the graph status. \n * - stop - initiate subgraph termination. It returns without waiting for graph termination to be completed.\n */\n\nvar graphName = \"DI_Investigation.kafka.pseudo_kafka\"\nvar subgraphInput = \"data from caller\"\nvar paramValue = \"parameter from caller\"\n\nvar graph_instance\n\nfunction onResume(ctx, resume_index) {\n    $.log(\"r_index to log\", $.logSeverity.INFO, resume_index);\n    try {\n        graph_instance = $.instantiateGraph(graphName,\n            { \"resume_parameter\": resume_index },\n            // handle subgraph output port with name 'output'\n            {\n                \"output\": function (ctx, s) {\n                    $.log(\"s to log\", $.logSeverity.INFO, s);\n                    $.output(s)\n                }\n            }\n        )\n    } catch (e) {\n        $.fail(e.message)\n        return\n    }\n\n    // write string in subraph input port with name 'input'\n    graph_instance.input(subgraphInput)\n\n    // wait for graph execution is finished\n    status = graph_instance.wait()\n    $.log(\"status to log\", $.logSeverity.INFO, status);\n\n    // check graph status\n    if (status != $.graphStatus.completed) {\n        $.fail(\"Subgraph is failed\")\n    }\n}\n\nfunction onStop() {\n    graph_instance.stop();\n}\n\nfunction onStart(ctx) {\n\n    try {\n        graph_instance = $.instantiateGraph(graphName,\n            // // change configuration parameter\n            { \"resume_parameter\": 0 },\n            // handle subgraph output port with name 'output'\n            {\n                \"output\": function (ctx, s) {\n                    // // check subgraph output\n                    // // operator.com.sap.system.python3Operator:python3operator111: data from caller : parameter from caller\n                    // if (s != subgraphInput + \" : \" + paramValue) {\n                    //     $.fail(\"Unexpected subgraph output: \" + s)\n                    // }\n\n                    $.log(\"s to log\", $.logSeverity.INFO, s);\n                    $.log(\"ctx to log\", $.logSeverity.INFO, ctx);\n                    $.output(s)\n                    // // stop subgraph if output is expected\n                    // graph_instance.stop()\n                }\n            }\n        )\n    } catch (e) {\n        $.fail(e.message)\n        return\n    }\n\n    // write string in subraph input port with name 'input'\n    graph_instance.input(subgraphInput)\n\n    // wait for graph execution is finished\n    status = graph_instance.wait()\n    $.log(\"status to log\", $.logSeverity.INFO, status);\n\n    // TODO: We want the kafka (message_generator) to be running\n    // check graph status\n    if (status != $.graphStatus.completed) {\n        $.fail(\"Subgraph is failed\")\n    } else {\n        // $.done() // completes parent graph\n    }\n\n}"
                },
                "additionalinports": [
                    {
                        "name": "stop",
                        "type": "string"
                    },
                    {
                        "name": "start",
                        "type": "string"
                    },
                    {
                        "name": "resume",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "output",
                        "type": "string"
                    }
                ]
            }
        },
        "12multiplexer2": {
            "component": "com.sap.system.multiplexer.1-2",
            "metadata": {
                "label": "1:2 Multiplexer",
                "x": 627.9999961853027,
                "y": 228,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {}
            }
        },
        "wiretap3": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 810.9999952316284,
                "y": 146.5,
                "height": 80,
                "width": 120,
                "ui": "dynpath",
                "config": {}
            }
        },
        "terminal1": {
            "component": "com.sap.util.terminal",
            "metadata": {
                "label": "Terminal",
                "x": -540.0000038146973,
                "y": 3,
                "height": 80,
                "width": 120,
                "ui": "dynpath",
                "config": {}
            }
        },
        "python3operator2": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Log Process Complete",
                "x": 628,
                "y": 28,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "script": "import json\n\ndef on_input(data):\n    log_path = \"/vrep/vflow/tmp/kafka-logs/log.json\"\n    \n    with open(log_path, \"r\") as f:\n        json_file = json.load(f)\n\n    json_file[str(data)] = 1\n\n    with open(log_path, \"w\") as f:\n        json.dump(json_file, f)\n\napi.set_port_callback(\"input\", on_input)"
                },
                "additionalinports": [
                    {
                        "name": "input",
                        "type": "string"
                    }
                ]
            }
        },
        "terminal2": {
            "component": "com.sap.util.terminal",
            "metadata": {
                "label": "Terminal",
                "x": -554,
                "y": 316,
                "height": 80,
                "width": 120,
                "ui": "dynpath",
                "config": {}
            }
        },
        "python3operator3": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3 Operator",
                "x": -357,
                "y": 316,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "script": "import json\n\ndef on_input(data):\n    \n    log_path = \"/vrep/vflow/tmp/kafka-logs/log.json\"\n    resume_index = 0\n    \n    with open(log_path, \"r\") as f:\n        json_obj = json.load(f)\n    \n    for i in json_obj:\n        if (json_obj[i] == 0):\n            resume_index = i\n            break\n    \n    api.send(\"output\", str(resume_index))\n\napi.set_port_callback(\"input\", on_input)\n"
                },
                "additionalinports": [
                    {
                        "name": "input",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "output",
                        "type": "string"
                    }
                ]
            }
        },
        "terminal3": {
            "component": "com.sap.util.terminal",
            "metadata": {
                "label": "Terminal",
                "x": 348,
                "y": 385,
                "height": 80,
                "width": 120,
                "ui": "dynpath",
                "config": {}
            }
        },
        "python3operator4": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3 Operator",
                "x": -362,
                "y": 3,
                "height": 80,
                "width": 120,
                "extensible": true,
                "config": {
                    "script": "import json\n\n\ndef on_input(data):\n    log_path = \"/vrep/vflow/tmp/kafka-logs/log.json\"\n\n    with open(log_path, \"w\") as f:\n        json.dump({}, f)\n    \n    api.send(\"output\", \"start\")\n\napi.set_port_callback(\"input\", on_input)"
                },
                "additionalinports": [
                    {
                        "name": "input",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "output",
                        "type": "string"
                    }
                ]
            }
        }
    },
    "groups": [],
    "connections": [
        {
            "metadata": {
                "points": "196.99999904632568,181.5 224.99999856948853,181.5 224.99999856948853,217 252.99999809265137,217"
            },
            "src": {
                "port": "out2",
                "process": "12multiplexer1"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap1"
            }
        },
        {
            "metadata": {
                "points": "346.49999809265137,112 392.25,112 392.25,163 437.99999713897705,163"
            },
            "src": {
                "port": "outstring",
                "process": "tostringconverter1"
            },
            "tgt": {
                "port": "input",
                "process": "python3operator1"
            }
        },
        {
            "metadata": {
                "points": "196.99999904632568,163.5 224.99999856948853,163.5 224.99999856948853,103 287.49999809265137,103"
            },
            "src": {
                "port": "out1",
                "process": "12multiplexer1"
            },
            "tgt": {
                "port": "ininterface",
                "process": "tostringconverter1"
            }
        },
        {
            "metadata": {
                "points": "-3.000004768371582,172.5 67.99999904632568,172.5"
            },
            "src": {
                "port": "output",
                "process": "javascriptv2operator1"
            },
            "tgt": {
                "port": "in1",
                "process": "12multiplexer1"
            }
        },
        {
            "metadata": {
                "points": "566.999997138977,181 595,181 595,268 622.9999961853027,268"
            },
            "src": {
                "port": "stop",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "in1",
                "process": "12multiplexer2"
            }
        },
        {
            "metadata": {
                "points": "751.9999961853027,259 779,259 779,186.5 805.9999952316284,186.5"
            },
            "src": {
                "port": "out1",
                "process": "12multiplexer2"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap3"
            }
        },
        {
            "metadata": {
                "points": "751.9999961853027,277 802,277 802,215.75 -182,215.75 -182,154.5 -132.00000476837158,154.5"
            },
            "src": {
                "port": "out2",
                "process": "12multiplexer2"
            },
            "tgt": {
                "port": "stop",
                "process": "javascriptv2operator1"
            }
        },
        {
            "metadata": {
                "points": "566.999997138977,163 595,163 595,68 623,68"
            },
            "src": {
                "port": "output",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "input",
                "process": "python3operator2"
            }
        },
        {
            "metadata": {
                "points": "-430,356 -362,356"
            },
            "src": {
                "port": "out1",
                "process": "terminal2"
            },
            "tgt": {
                "port": "input",
                "process": "python3operator3"
            }
        },
        {
            "metadata": {
                "points": "-233,356 -182.5,356 -182.5,190.5 -132.00000476837158,190.5"
            },
            "src": {
                "port": "output",
                "process": "python3operator3"
            },
            "tgt": {
                "port": "resume",
                "process": "javascriptv2operator1"
            }
        },
        {
            "metadata": {
                "points": "472,425 522,425 522,303 388,303 388,181 437.99999713897705,181"
            },
            "src": {
                "port": "out1",
                "process": "terminal3"
            },
            "tgt": {
                "port": "triggerStop",
                "process": "python3operator1"
            }
        },
        {
            "metadata": {
                "points": "-416.00000381469727,43 -367,43"
            },
            "src": {
                "port": "out1",
                "process": "terminal1"
            },
            "tgt": {
                "port": "input",
                "process": "python3operator4"
            }
        },
        {
            "metadata": {
                "points": "-238,43 -185,43 -185,172.5 -132.00000476837158,172.5"
            },
            "src": {
                "port": "output",
                "process": "python3operator4"
            },
            "tgt": {
                "port": "start",
                "process": "javascriptv2operator1"
            }
        }
    ],
    "inports": {},
    "outports": {}
}